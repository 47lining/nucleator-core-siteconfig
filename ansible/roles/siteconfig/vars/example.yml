# Copyright 2015 47Lining LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

#
# configuration for customer example.com
#

customer_domain: "example.yourdomain.com"

# a cage is a set of managed AWS infrastructure that exists for a particular purpose

cage_names:

  # The AWS Acccount that hosts the build cage acts as the source account in cross-account builds
  build:
    account: apphosting
    region: us-west-2
    owner: exampleUser
  ci:
    account: apphosting
    region: us-west-2
    owner: exampleRole


# cages can be maintained across one or more customer-specific AWS Accounts.

aws_accounts:
  apphosting:
    account_number: 123456789012
    bootstrap_region: us-west-2
    map_region_plus_redundant_zone_number_to_vpc_valid_az:
      us-west-2:
        AZ1: us-west-2a
        AZ2: us-west-2b
      us-east-1:
        AZ1: us-east-1a
        AZ2: us-east-1c
      eu-west-1:
        AZ1: eu-west-1a
        AZ2: eu-west-1b

#
# Nucleator Cage CIDR Whitelist
#
# Access to Nucleator Cages will be limited to those CIDRs listed here
# 
# If you add a specific whitelist and are using the Nucleator Builder
# Stackset to manage provisioning & configuration of other Cages, be
# sure to include the public IP of the NAT instance in the build cage
# in your whitelist.
#
NUCLEATOR_CAGE_CIDR_WHITELIST:
  - 0.0.0.0/0    # Strongly recommend changing whitelist to restricted IP ranges

# When CIDR_WHITELIST changes, special care must be taken not to:
#
# - exceed the max numbe of rules per NACL; or
# - create conflicting NACL rule numbers
#
# Both of these can be avoided by setting
#     NUCLEATOR_CAGE_REMOVE_INBOUND_PUBLIC_RULES
# to True for an intervening "cage provision" to force a stack
# update that removes all inbound NACL rules between updates
# to the Whitelist. This approach will create some
# minimal access downtime for your cage
#
# As an alternative,
#     NUCLEATOR_CAGE_CIDR_WHITELIST_INITIAL_RULENUM
# is provided, so that rules can be updated to use a different
# initial rulenum. This approach avoids conflicting NACL rule numbers
# and incurs zero downtime, but with more than a small number of
# whitelist entries (about 4), will likely exhaust the max number of
# rules per NACL.
#
# This is true because, when updating stacks, Cloudformation first
# creates all required new Resources, then in the
# "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS" phase it deletes unused
# resources.
#
NUCLEATOR_CAGE_CIDR_WHITELIST_INITIAL_RULENUM: 100
NUCLEATOR_CAGE_REMOVE_INBOUND_PUBLIC_RULES: False
NUCLEATOR_CAGE_OPENVPN_ENABLED: False
